// Замыкание (closure) представляет объект функции, который запоминает свое лексическое окружение даже в том случае,
// когда она выполняется вне своей области видимости.

//  Технически замыкание включает три компонента:

//  внешняя функция, которая определяет некоторую область видимости и в которой определены некоторые переменные
//  и параметры - лексическое окружение

//  переменные и параметры (лексическое окружение), которые определены во внешней функции

//  вложенная функция, которая использует переменные и параметры внешней функции

//  В языке C# реализовать замыкания можно разными способами - с помощью локальных функций и лямбда-выражений.

//  Рассмотрим создание замыканий через локальные функции:

var fn = Outer();   // fn = Inner, так как метод Outer возвращает функцию Inner
// вызываем внутреннюю функцию Inner
fn();  // 6
fn();  // 7
fn();  // 8

Action Outer()  // метод или внешняя функция
{
    int x = 5;  // лексическое окружение - локальная переменная
    void Inner()      // локальная функция
    {
        x++;          // операции с лексическим окружением
        Console.WriteLine(x);
    }
    return Inner;     // возвращаем локальную функцию
}
//  Здесь метод Outer в качестве возвращаемого типа имеет тип Action, то есть метод возвратить функцию,
//  которая не принимает параметров и имеет тип void.

//  Переменная fn и представляет собой замыкание, то есть объединяет две вещи: функцию и окружение,
//  в котором функция была создана. И несмотря на то, что мы получили локальную функцию и можем ее
//  вызывать вне ее метода, в котором она определена, тем не менее она запомнила свое лексическое
//  окружение и может к нему обращаться и изменять, что мы увидим по консольному выводу.

#region Реализация с помощью лямбда-выражений
//  С помощью лямбд можно сократить определение замыкания:
var outerFN = () =>
{
    int x = 10;
    var InnerFn = () => Console.WriteLine(++x);
    return InnerFn;
};
#endregion

#region Применение параметров
//  Кроме внешних переменных к лексическому окружению также относятся параметры окружающего метода.
//  Рассмотрим использование параметров:
var fn2 = Multiply(5);

Console.WriteLine(fn2(5));  //25
Console.WriteLine(fn2(6));  //30

Operation Multiply(int x)
{
    int Inner(int m)
    {
        return x * m;
    }
    return Inner;
}
// аналогично, с помощью лямбд
var multiply = (int x) => (int m) => x * m;
var fn3 = multiply(6);
Console.WriteLine(fn3(5));  //30

delegate int Operation(int x);
#endregion
//  Агрегатные операции

//  К агрегатным операциям относят различные операции над выборкой, например, получение числа элементов,
//  получение минимального, максимального и среднего значения в выборке, а также суммирование значений.

#region Метод Aggregate
//  Метод Aggregate выполняет общую агрегацию элементов коллекции в зависимости от указанного выражения. 
int[] numbers = { 1, 2, 3, 4, 5 };

int query = numbers.Aggregate((x, y) => x - y);
Console.WriteLine(query);   // -13
//  Переменная query будет представлять результат агрегации массива. В качестве условия агрегации используется
//  выражение (x,y)=> x - y, то есть вначале из первого элемента вычитается второй, потом из получившегося
//  значения вычитается третий и так далее. 
int query2 = numbers.Aggregate((x, y) => x + y); // аналогично 1 + 2 + 3 + 4 + 5
//  Еще одна версия метода позволяет задать начальное значение, с которого начинается цепь агрегатных операций:
string[] words = { "Gaudeamus", "igitur", "Juvenes", "dum", "sumus" };

var sentece = words.Aggregate("Text:",(first, next) => $"{first} {next}");
Console.WriteLine(sentece);
//  В данном случае объединяются все элементы массива words, но первым элемент агрегатной операции будет строка
//  "Text:".
#endregion

#region Получение размера выборки. Метод Count
// Для получения числа элементов в выборке используется метод Count():
int[] _numbers = { 1, 2, 3, 4, 10, 34, 55, 66, 77, 88 };
int count = _numbers.Count();
Console.WriteLine(count);   //10
//Метод Count() в одной из версий также может принимать лямбда-выражение, которое устанавливает условие выборки.
int count2 = _numbers.Count(i => i % 2 == 0);
Console.WriteLine(count2);  //6
#endregion

#region Получение суммы
//   Для получения суммы значений применяется метод Sum:
int sum = _numbers.Sum(); // 340
//  Метод Sum() имеет ряд перегрузок. В частности, если у нас набор сложных объектов, как в примере выше,
//  то мы можем указать свойство, значения которого будут суммироваться:
Person[] people = { new Person("Tom", 37), new Person("Sam", 28), new Person("Bob", 41) };

int ageSum = people.Sum(p => p.Age);   //106
#endregion

#region Максимальное, минимальное и среднее значения
//  Для нахождения минимального значения применяется метод Min(), для получения максимального - метод Max(),
//  а для нахождения среднего значения - метод Average()
int min = _numbers.Min();               // Min: 1
int max = _numbers.Max();               // Max: 88
double average = _numbers.Average();    // Average: 34  
//  Если мы работаем со сложными объектами, то в эти методы передается делегат, который принимает свойство,
//  применяемое в вычислениях:
int minAge = people.Min(p => p.Age); 
int maxAge = people.Max(p => p.Age);
double averageAge = people.Average(p => p.Age);
// В данном случае для вычислений применяется свойство Age, то есть вычисляется минимальный, максимальный
// и средний возраст.
#endregion
record Person (string Name, int Age);
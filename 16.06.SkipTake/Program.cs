//  Методы Skip и Take

//  Ряд методов в LINQ позволяют получить часть коллекции, в частности, такие методы как Skip, Take, SkipWhile,
//  TakeWhile.

#region Skip
//  Метод Skip() пропускает определенное количество элементов. Количество пропускаемых элементов передается
//  в качестве параметра в метод:
string[] people = { "Tom", "Sam", "Bob", "Mike", "Kate" };

var result = people.Skip(2);  // "Bob", "Mike", "Kate"
                              //  В данном случае пропускаем первые два элемента

//  Если необходимо пропустить определенное количество элементов с конца коллекции, то применяется метод SkipLast():
var result2 = people.SkipLast(2);   // "Tom", "Sam", "Bob"
#endregion

#region SkipWhile
//  Метод SkipWhile() пропускает цепочку элементов, начиная с первого элемента, пока они удовлетворяют
//  определенному условию
//  SkipWhile(Func<TSource, bool> predicate);
//  В метод передается делегат, который представляет условие, он получает каждый элемент коллекции и
//  возвращает значение true, если элемент соответствует условию. Например:
string[] people2 = { "Tom", "Sam", "Mike", "Kate", "Bob" };
var result3 = people2.SkipWhile(p => p.Length == 3);    // "Mike", "Kate", "Bob"
foreach (var person in result3)
    Console.WriteLine(person);

//  Здесь метод SkipWhile пропускает элементы, длина которых равна 3 символам. Первые два элемента массива
//  people ("Tom", "Sam") соответствуют этому условию и поэтому будут пропущены. На третьем элементе ("Mike")
//  цепочка обрывается, поэтому последний элемент ("Bob"), длина которго тоже равна 3-м символам, не будет
//  пропущен и будет включен в выходную коллекцию:
//  Если в массиве первый элемент имел бы длину больше или меньше 3 символов, то цепочка пропускаемых элементов
//  прервалась бы уже на первом элементе, и поэтому метод SkipWhile возвратил бы все элементы массива.
#endregion

#region Take
//  Метод Take() извлекает определенное число элементов. Количество извлекаемых элементов передается в метод
//  в качестве параметра.
var result4 = people.Take(3);        // извлекаем первые 3 элемента
var result5 = people.TakeLast(3);    // извлекаем последние 3 элемента
#endregion

#region TakeWhile
//  Метод TakeWhile() выбирает цепочку элементов, начиная с первого элемента, пока они удовлетворяют
//  определенному условию:
//  TakeWhile(Func<TSource, bool> predicate);
string[] people3 = { "Tom", "Sam", "Mike", "Kate", "Bob" };
// извлекаем первые элементы, длина которых равна 3
var result6 = people3.TakeWhile(p => p.Length == 3);    // "Tom", "Sam"
foreach (var person in result6)
    Console.WriteLine(person);
//  Здесь метод TakeWhile выбирает элементы, длина которых равна 3 символам. Первые два элемента массива people
//  ("Tom", "Sam") соответствуют этому условию и поэтому будут выбраны в выходную коллекцию. На третьем элементе
//  ("Mike") цепочка обрывается, поэтому последний элемент ("Bob"), длина которго тоже равна 3-м символам,
//  не будет включен в выходную коллекцию
//  Если бы первый элемент в массиве имел бы длину больше или меньше 3 символов, то в этом случае метод TakeWhile
//  возвратил бы нам 0 элементов.
#endregion

#region Постраничный вывод
//  Совмещая оба метода - Take и Skip, мы можем выбрать определенное количество элементов начиная с
//  определенного элемента. Например, выберем два элемента, начиная со четвертого (то есть пропустим
//  3 первых элемента):
string[] _people = { "Tom", "Sam", "Mike", "Kate", "Bob", "Alice" };

// пропускаем 3 элемента и выбираем 2 элемента
var result7 = _people.Skip(3).Take(2);
#endregion
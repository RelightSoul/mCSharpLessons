//  В отличие от ссылочных типов переменным/параметрам значимых типов нельзя напрямую присвоить значение null.
//  Тем не менее нередко бывает удобно, чтобы переменная/параметр значимого типа могли принимать значение null,
//  Например, получаем числовое значение из базы данных, которое в бд может отсутствовать. То есть, если
//  значение в базе данных есть - получим число, если нет - то null.

//  Чтобы присвоения переменной или параметру значимого типа значения null, эти
//  переменная/параметр значимого типа должны представлять тип nullable. Для этого
//  после названия типа указывается знак вопроса ?

int? val = null;
Console.WriteLine(val);
//  Здесь переменная val представляет не просто тип int, а тип int? - тип, переменные/параметры
//  которого могут принимать как значения типа int, так и значение null.

#region  Свойства Value и HasValue и метод GetValueOrDefault
//  Структура Nullable<T> имеет два свойства:
//  Value - значение объекта
//  HasValue: возвращает true, если объект хранит некоторое значение, и false, если объект равен null.

//  Можем проверить есть ли значение, если да результатом будет значение, если нет Null
void PrintNullable (int? number)
{
    if (number.HasValue)
    {
        Console.WriteLine(number.Value);
    }
    else
    {
        Console.WriteLine("Null");
    }
}

//  Также структура Nullable<T> имеет метод GetValueOrDefault(). Он возвращает значение переменной/параметра,
//  если они не равны null. Если они равны null, то возвращается значение по умолчанию.
int? numb1 = 15;
Console.WriteLine(numb1.GetValueOrDefault());
int? numb2 = null;
Console.WriteLine(numb2.GetValueOrDefault());
#endregion

#region Преобразование значимых nullable-типов
//  явное преобразование от T? к T
int? x1 = null;
if (x1.HasValue)
{
    int x2 = (int)x1;
    Console.WriteLine(x2);
}

//  неявное преобразование от T к T?
int x3 = 14;
int? x4 = x3;

//  неявные расширяющие преобразования от V к T?
int x5 = 7;
long? x6 = x5;

//  явные сужающие преобразования от V к T?
long x7 = 567;
int? x8 = (int?)x7;

//  явные сужающие преобразования от V? к T?
long? x9 = 567;
int? x10 = (int?)x9;

//  явные сужающие преобразования от V? к T
long? x11 = 5435;
if (x11.HasValue)
{
    int x12 = (int)x11;
}
#endregion

#region Операции с nullable-типами
//  nullable-типы поддерживают тот же набор операций, что и их не-nullable двойники.
//  Но следует учитывать, что если в операции участвует nullable-тип, то результатом
//  также будет значение nullable-типа
int? x = 5;
//  int z = x + 7;          // нельзя
int? w = x + 7;         // можно
int d = x.Value + 7;    // можно

//  В арифметических операциях, если один из операндов равен null, то результатом операции также будет null:
int? z1 = null;
int? z2 = z1 + 4;   // z2 = null
#endregion
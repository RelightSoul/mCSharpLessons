//  Работа с датами и временем
//  Структура DateTime

//  Для работы с датами и временем в .NET предназначена структура DateTime. Она представляет дату и время
//  от 00:00:00 1 января 0001 года до 23:59:59 31 декабря 9999 года.

//  Для создания нового объекта DateTime также можно использовать конструктор. Пустой конструктор создает
//  начальную дату:

using System;

DateTime dateTime = new DateTime();  // 01.01.0001 0:00:00

//  То есть мы получим минимально возможное значение, которое также можно получить следующим образом:
Console.WriteLine(DateTime.MinValue);

//  Чтобы задать конкретную дату, нужно использовать один из конструкторов, принимающих параметры:
DateTime date1 = new DateTime(1989,12,29); // год - месяц - день
Console.WriteLine(date1);

//  Установка времени:
DateTime date2 = new DateTime(1989, 12, 29, 1, 40, 12); //  год - месяц - день - час - минута - секунда
Console.WriteLine(date2);

//  Если необходимо получить текущую время и дату, то можно использовать ряд свойств DateTime:
Console.WriteLine(DateTime.Now);
Console.WriteLine(DateTime.UtcNow);
Console.WriteLine(DateTime.Today);
//  Свойство DateTime.Now берет текущую дату и время компьютера, DateTime.UtcNow - дата и время относительно
//  времени по Гринвичу (GMT) и DateTime.Today - только текущая дата.

//  При работе с датами надо учитывать, что по умолчанию для представления дат применяется григорианский
//  календарь.Но что будет, если мы захотим получить день недели для 5 октября 1582 года:

DateTime someDate = new DateTime(1582, 10, 5);
Console.WriteLine(someDate.DayOfWeek);
//  Консоль высветит значение Tuesday, то есть вторник. Однако, как может быть известно из истории, впервые
//  переход с юлианского календаря на григорианский состоялся в октябре 1582 года. Тогда после даты 4 октября
//  (четверг) (еще по юлианскому календарю) сразу перешли к 15 октября (пятница)(уже по григорианскому календарю).
//  Таким образом, фактически выкинули 10 дней. То есть после 4 октября шло 15 октября.

//  В большинстве случаев данный факт вряд ли как-то повлияет на вычисления, однако при работе с очень давними
//  датами данный аспект следует учитывать.

#region Операции с DateTime
//Основные операции со структурой DateTime связаны со сложением или вычитанием дат. Например, надо к
//некоторой дате прибавить или, наоборот, отнять несколько дней.

//Для добавления дат используется ряд методов:
//Add(TimeSpan value): добавляет к дате значение TimeSpan
//AddDays(double value): добавляет к текущей дате несколько дней
//AddHours(double value): добавляет к текущей дате несколько часов
//AddMinutes(double value): добавляет к текущей дате несколько минут
//AddMonths(int value): добавляет к текущей дате несколько месяцев
//AddYears(int value): добавляет к текущей дате несколько лет

DateTime date3 = new DateTime(2015, 7, 20, 18, 30, 25);  // 20.07.2015 18:30:25  
Console.WriteLine(date3.AddHours(3));   // 20.07.2015 21:30:25  

//  Для вычитания дат используется метод Subtract(DateTime date):
DateTime date4 = new DateTime(2015, 7, 20, 18, 30, 25);  // 20.07.2015 18:30:25  
DateTime date5 = new DateTime(2015, 7, 20, 21, 30, 25);  // 20.07.2015 21:30:25  
Console.WriteLine(date5.Subtract(date4));

//  Метод Substract не имеет возможностей для отдельного вычитания дней, часов и так далее. Но это и не надо,
//  так как мы можем передавать в метод AddDays() и другие методы добавления отрицательные значения:
Console.WriteLine(date5.AddHours(-3));

//  Кроме операций сложения и вычитания еще есть ряд методов форматирования дат:
DateTime date11 = new DateTime(2015, 7, 20, 18, 30, 25);
Console.WriteLine(date11.ToLocalTime()); // 20.07.2015 21:30:25
Console.WriteLine(date11.ToUniversalTime()); // 20.07.2015 15:30:25
Console.WriteLine(date11.ToLongDateString()); // 20 июля 2015 г.
Console.WriteLine(date11.ToShortDateString()); // 20.07.2015
Console.WriteLine(date11.ToLongTimeString()); // 18:30:25
Console.WriteLine(date11.ToShortTimeString()); // 18:30
//  Метод ToLocalTime() преобразует время UTC в локальное время, добавляя смещение относительно времени
//  по Гринвичу. Метод ToUniversalTime(), наоборот, преобразует локальное время во время UTC, то есть
//  вычитает смещение относительно времени по Гринвичу. Остальные методы преобразуют дату к определенному формату.
#endregion
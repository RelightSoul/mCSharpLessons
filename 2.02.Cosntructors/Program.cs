//  Конструкторы, инициализаторы и деконструкторы

//  В прошлой статье для создания объекта использовался конструктор по умолчанию.
//  Однако мы сами можем определить свои конструкторы. Как правило, конструктор
//  выполняет инициализацию объекта. При этом если в классе определяются свои конструкторы,
//  то он лишается конструктора по умолчанию.

//  Создаю класс Person, продолжаю разбор в нём

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace _2._02.Cosntructors
{
    class Program
    {
        static void Main(string[] args)
        {
            Person tom = new Person();
            tom.Print();

            Person sam = new Person("Sam", 32, "Male");
            sam.Print();

            Car newCar = new Car(100,"Luisa","Porshe");
            newCar.PrintCar();

            #region Инициализаторы объектов
            //  Для инициализации объектов классов можно применять инициализаторы. Инициализаторы представляют
            //  передачу в фигурных скобках значений доступным полям и свойствам объекта:
            Car anotherPoshre = new Car { carSpeed = 200, carName = "Lusy", carMaker = "Porshe" };
            anotherPoshre.PrintCar();
            //С помощью инициализатора объектов можно присваивать значения всем доступным полям и свойствам
            //объекта в момент создания. При использовании инициализаторов следует учитывать следующие моменты:

            //С помощью инициализатора мы можем установить значения только доступных из вне класса полей и
            //свойств объекта. Например, в примере выше поля name и age имеют модификатор доступа public,
            //поэтому они доступны из любой части программы.

            //Инициализатор выполняется после конструктора, поэтому если и в конструкторе, и в инициализаторе
            //устанавливаются значения одних и тех же полей и свойств, то значения, устанавливаемые в
            //конструкторе, заменяются значениями из инициализатора.
            #endregion

            #region Деконструкторы + Сахар
            //Деконструкторы(не путать с деструкторами) позволяют выполнить декомпозицию объекта на отдельные части.
            Person newPerson = new Person("Sara", 19);

            //  Для декострукции в классе Person нужно объявить метод декострукции. 
            (string name, int age) = newPerson;
            Console.WriteLine(name + " " + age);
            //  По сути такая запить равна 
            string name1; int age1;
            newPerson.Deconstruct(out name1, out age1);

            //При получении значений из декоструктора нам необходимо предоставить столько переменных, сколько
            //деконструктор возвращает значений. Однако бывает, что не все эти значения нужны. И вместо
            //возвращаемых значений мы можм использовать прочерк _. Например, нам надо получить только возраст
            //пользователя:
            (_, int age2) = newPerson;
            Console.WriteLine(age2);
            #endregion
        }
    }
}
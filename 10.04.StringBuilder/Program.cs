// Класс StringBuilder

// Хотя класс System.String предоставляет нам широкую функциональность по работе со строками, все таки он имеет
// свои недостатки. Прежде всего, объект String представляет собой неизменяемую строку. Когда мы выполняем
// какой-нибудь метод класса String, система создает новый объект в памяти с выделением ему достаточного места.
// Удаление первого символа - не самая затратная операция. Однако когда подобных операций множество, а объем
// текста, для которого надо выполнить данные операции, также не самый маленький, то издержки при потере
// производительности становятся более существенными.

// Чтобы выйти из этой ситуации во фреймворк .NET был добавлен новый класс StringBuilder, который находится
// в пространстве имен System.Text. Этот класс представляет динамическую строку.
using System.Text;

#region Создание StringBuilder
//  Для создания объекта StringBuilder можно использовать ряд его конструкторов.
//  Прежде всего можно создать пустой StringBuilder:
StringBuilder sb = new StringBuilder();
//  Можно сразу инициализировать объект определенной строкой:
StringBuilder sb2 = new StringBuilder("Привет мир");
//  С помощью метода ToString() мы можем получить строку, которая хранится в StringBuilder:
Console.WriteLine(sb2.ToString());
//  Либо можно просто передать объект StringBuilder:
Console.WriteLine(sb2);
#endregion

#region Длина и емкость StringBuilder
//  Для хранения длины строки в классе StringBuilder определенно свойство Length. Однако есть и вторая величина
//  - емкость выделенной памяти. Это значение хранится в свойстве Capacity. Емкость - это выделенная память
//  под объект. Установка емкости позволяет уменьшить выделения памяти и тем самым повысить производительность.

//  Если строка, которая передается в конструктор StringBuilder, имеет длину 16 символов или меньше, то начальная
//  ёмкость в StringBuilder равна 16. Если начальная строка больше 16 символов, то в качестве начальной
//  емкости StringBuilder будет использовать длину строки.
Console.WriteLine(sb2.Length);   //10
Console.WriteLine(sb.Capacity);  //16
//  Хотя в данном случае длина равна 10 символов, но реально емкость будет составлять по умолчанию 16 символов.
//  То есть мы видим, что при создании строки StringBuilder выделяет памяти больше, чем необходимо этой строке.
//  При увеличении строки в StringBuilder, когда количество символов превосходит начальную емкость, то емкость
//  увеличивается в два и более раз.

//  Если у нас заранее известен максимальный размер объекта, то мы можем таким образом сразу задать емкость с
//  помощью одного из конструкторов и тем самым избежать последующих издержек при дополнительном выделении памяти.
StringBuilder sb3 = new StringBuilder(32);
StringBuilder sb4 = new StringBuilder("Hey", 160);
#endregion

#region Операции со строками в StringBuilder
//Для операций над строками класс StringBuilder определяет ряд методов:

//Append: добавляет подстроку в объект StringBuilder

//Insert: вставляет подстроку в объект StringBuilder, начиная с определенного индекса

//Remove: удаляет определенное количество символов, начиная с определенного индекса

//Replace: заменяет все вхождения определенного символа или подстроки на другой символ или подстроку

//AppendFormat: добавляет подстроку в конец объекта StringBuilder

var _sb = new StringBuilder("Название:");
_sb.Append(" Руководство");
_sb.Append(" по С#");
Console.WriteLine(_sb);  // Название: Руководство по С#

// заменяем слово 
Console.WriteLine(_sb.Replace("Руководство", "Материаллы"));  // Название: Материаллы по С#

// удаляем 13 символов, начиная с 7-го
Console.WriteLine(_sb.Remove(0,10));    // Материаллы по С#

// получаем строку из объекта StringBuilder
string s = _sb.ToString();

//Microsoft рекомендует использовать класс String в следующих случаях:
//При небольшом количестве операций и изменений над строками
//При выполнении фиксированного количества операций объединения. В этом случае компилятор может объединить
//все операции объединения в одну
//Когда надо выполнять масштабные операции поиска при построении строки, например IndexOf или StartsWith.

//Класс StringBuilder рекомендуется использовать в следующих случаях:
//При неизвестном количестве операций и изменений над строками во время выполнения программы
//Когда предполагается, что приложению придется сделать множество подобных операций
#endregion
